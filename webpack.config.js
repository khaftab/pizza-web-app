const path = require('path')
const MiniCssExtractPlugin = require('mini-css-extract-plugin')
const { CleanWebpackPlugin } = require('clean-webpack-plugin')
let mode = 'development'

if (process.env.NODE_ENV && process.env.NODE_ENV === 'production') {
    mode = 'production'
}
module.exports = {
    mode: mode,
    devtool: false,
    entry: './client/resources/js/app.js',
    output: {
        path: path.resolve(__dirname, './client/public'),
        filename: 'js/[name].js'
        // assetModuleFilename: 'img/[hash][ext][query]' // this will output images in images folder.
    },
    module: {
        rules: [
            {
                test: /\.(png|jpe?g|svg|gif)$/i,
                type: 'asset/resource' // aseet/resource will make new image in the build time. But asset/inline will convert the image into base64 and put inside the js bundle. whereas only 'asset' let the webpack determine wheather it should be with js or separate image file. The max size of webpack to put inline a image is 8kb
            },
            {
                test: /\.(s[ac]|c)ss$/i, //looking for saas or scss or css
                use: [{
                    loader: MiniCssExtractPlugin.loader,
                    options: {
                        publicPath: "" // this will required when we want to import images inside our js|jsx. 
                    }
                }
                    , 'css-loader', 'postcss-loader', 'sass-loader'] // mincss will create a new index.css file in the dist folder
            },

            {
                test: /\.jsx?$/,
                exclude: /node_modules/,
                use: {
                    loader: 'babel-loader'
                }
            }
        ]
    },
    plugins: [
        // new CleanWebpackPlugin(), we are disableing because we want to use the css generated by webpack in the dist folder
        new MiniCssExtractPlugin({
            filename: 'css/[name].css' // we can speicfy a directory here
        }),
        // new ReactRefreshWebpackPlugin(),
    ],
    devServer: {
        static: path.join(__dirname, './client/public'),
        hot: true
    }
}

// currently react hot reaload is not working 